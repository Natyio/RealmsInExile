
##################################################
# Effects related to Board Games
##################################################

##################################################
# SETUP & CLEANUP EFFECTS

configure_start_drinking_contest_effect = {
	# DOCUMENTATION
	## scope:dc_initiator
		### Who started the board game? This is who the output/invalidation events will fire for.
	## scope:dc_attacker
		### The hostile party - in the event of a tie, the match is decided against them.
	## scope:dc_defender
		### The defending party - in the event of a tie, the match is decided in their favour.
	## scope:dc_system = flag:XYZ
		### These control both the relevant skills, counters, & some flavour adjacent to the game.
		### drinking_contest
	## scope:locale = flag:XYZ
		### These just trigger the event background of the same name. New ones can be added as needed, but should be added across all three events (round, victory, loss/drinking_contest.0001, drinking_contest.0031, drinking_contest.0041), as we can't add a scripted list.
		### tavern
	## output event ID
		### Which event fires after the game's completion?

	# Sort parties.
	$DC_INITIATOR$ = { save_scope_as = dc_initiator }
	$DC_DEFENDER$ = { save_scope_as = dc_defender }
	$DC_ATTACKER$ = { save_scope_as = dc_attacker }
	# Make sure they're clean for setup.
	hidden_effect = { remove_drinking_contest_variables_effect = yes}
	# Set them both to busy for the single combat.
	scope:dc_defender = {
		set_variable = {
			name = engaged_in_drinking_contest
			value = yes
		}
	}
	scope:dc_attacker = {
		set_variable = {
			name = engaged_in_drinking_contest
			value = yes
		}
	}
	## Sadly, we have no good justification for ripping your shirt off whilst doing a drinking contest.
	# Set rules & system.
	save_scope_value_as = {
		name = dc_system
		value = flag:$SYSTEM$
	}
	## Drinking Contest
	### In a drinking contest, our counter order is Stewardship -> Diplomacy -> Intrigue.
	if = {
		limit = { scope:dc_system = flag:drinking_contest }
		save_scope_value_as = {
			name = dc_skill_a
			value = flag:stewardship
		}
		save_scope_value_as = {
			name = dc_skill_b
			value = flag:diplomacy
		}
		save_scope_value_as = {
			name = dc_skill_c
			value = flag:intrigue
		}
	}
	# Note where the fight is taking place, if we're using a specific location.
	save_scope_value_as = {
		name = dc_locale
		value = flag:$LOCALE$
	}
	## Grab _scope backgrounds appropriately..
	if = {
		limit = { scope:dc_locale = flag:tavern }
		scope:dc_defender.location = { save_scope_as = tavern }
	}
	# Arrange aftermath.
	save_scope_value_as = {
		name = follow_up_event
		value = event_id:$OUTPUT_EVENT$
	}
	save_scope_value_as = {
		name = invalidation_event
		value = event_id:$INVALIDATION_EVENT$
	}
	# Configure starting scopes'n'variables.
	scope:dc_defender = {
		# Set our current round.
		set_variable = {
			name = dc_current_round
			value = 1
		}
		# Set up our initial scores.
		set_variable = {
			name = dc_current_score
			value = 0
		} 
	}
	scope:dc_attacker = {
		# Set up our initial scores.
		set_variable = {
			name = dc_current_score
			value = 0
		}
	}
	# Finally, send the first event.
	scope:dc_defender = { trigger_event = drinking_contest.0001 }
}

# Clean up all variables resulting from playing a drinking contest.
remove_drinking_contest_variables_effect = {
	# Player-side variables.
	remove_variable = dc_current_round
	remove_variable = dc_current_score
	remove_variable = dc_move_result
	# Remove any debug variables.
	remove_variable = dc_gib_only_losing_locs
	remove_variable = dc_gib_only_winning_locs
	# Note, we don't remove var:engaged_in_drinking_contest here, as we run this effect at the start of games for clean-up also.
}

remove_engaged_in_drinking_contest_variables_effect = {
	scope:dc_attacker = {
		if = {
			# Restrict to live characters to prevent errors.
			limit = { is_alive = yes }
			remove_variable = engaged_in_drinking_contest
		}
	}
	scope:dc_defender = {
		if = {
			# Restrict to live characters to prevent errors.
			limit = { is_alive = yes }
			remove_variable = engaged_in_drinking_contest
		}
	}
}

# Clean all consequences of a single combat.
remove_drinking_contest_info_effect = {
	scope:dc_defender = {
		# Only remove variables if they're alive, as otherwise we get errors.
		if = {
			limit = { is_alive = yes }
			remove_drinking_contest_variables_effect = yes
		}
	}
	scope:dc_attacker = {
		# Only remove variables if they're alive, as otherwise we get errors.
		if = {
			limit = { is_alive = yes }
			remove_drinking_contest_variables_effect = yes
		}
	}
	remove_engaged_in_drinking_contest_variables_effect = yes
}

dc_fire_clean_up_and_invalidate_effect = {
	remove_engaged_in_drinking_contest_variables_effect = yes
	# We try to wing this at scope:dc_defender...
	if = {
		limit = {
			scope:dc_defender = { is_alive = yes }
		}
		scope:dc_defender = {
			trigger_event = { saved_event_id = scope:invalidation_event }
		}
	}
	# ... then scope:dc_attacker...
	else_if = {
		limit = {
			scope:dc_attacker = { is_alive = yes }
		}
		scope:dc_attacker = {
			trigger_event = { saved_event_id = scope:invalidation_event }
		}
	}
	# ... then scope:dc_initiator...
	else_if = {
		limit = {
			scope:dc_initiator = { is_alive = yes }
		}
		scope:dc_initiator = {
			trigger_event = { saved_event_id = scope:invalidation_event }
		}
	}
	# ... then we give up, as somehow *everyone* involved in the board game has died simultaneously.
}

##################################################
# INTERACTION-SPECIFIC EFFECTS

challenge_to_drinking_contest_interaction_lock_in_game_type_effect = {
	$GAME_TYPE_SETTER$ = {
		# Landless characters use their location.
		if = {
			limit = { is_landed = no }
			location = {
				# Chess - fallback.
				save_scope_value_as = {
					name = dc_interaction_game_type
					value = flag:drinking_contest
				}
			}
		}
		# Landed characters use their capital.
		else = {
			capital_province = {
				# Chess - fallback.
				save_scope_value_as = {
					name = dc_interaction_game_type
					value = flag:drinking_contest
				}
			}
		}
	}
}

fp2_dc_stake_friendly_effect = {
	$VICTOR$ = {
		if = {
			# Obscure opinion adds from players.
			limit = { is_ai = yes }
			add_opinion = {
				target = $LOSER$
				modifier = pleased_opinion
				opinion = 25
			}
		}
		add_stress = minor_stress_loss
	}
	$LOSER$ = {
		if = {
			# Obscure opinion adds from players.
			limit = { is_ai = yes }
			add_opinion = {
				target = $VICTOR$
				modifier = pleased_opinion
				opinion = 10
			}
		}
		add_stress = minor_stress_gain
	}	
}

fp2_dc_stake_fame_effect = {
	$VICTOR$ = { add_prestige = medium_prestige_gain }
	$LOSER$ = { add_prestige = minor_prestige_loss }
}

fp2_dc_stake_fortune_effect = {
	# A nice, simple, transfer of funds.
	$LOSER$ = {
		pay_short_term_gold = {
			target = $VICTOR$
			gold = scope:dc_stake_gold
		}
	}
}

fp2_dc_stake_titles_effect = {
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = change
	}
	if = {
		limit = { $VICTOR$ = scope:actor }
		scope:dc_stake_land_recipient = {
			change_title_holder = {
				holder = scope:actor
				change = scope:change
			}
		}
	}
	else_if = {
		limit = { $VICTOR$ = scope:recipient }
		scope:dc_stake_land_actor = {
			change_title_holder = {
				holder = scope:recipient
				change = scope:change
			}
		}
	}
	resolve_title_and_vassal_change = scope:change
}

##################################################
# RESULT EFFECTS

perk_interaction_0122_apply_effects_effect = {
	# Stakes.
	## Friendlies bet opinion & stress.
	if = {
		limit = { always = scope:chess_friendly }
		fp2_dc_stake_friendly_effect = {
			VICTOR = scope:dc_victor
			LOSER = scope:dc_loser
		}
	}
	## Fame bets prestige.
	if = {
		limit = { always = scope:chess_prestige }
		fp2_dc_stake_fame_effect = {
			VICTOR = scope:dc_victor
			LOSER = scope:dc_loser
		}
	}
	## Fortune bets gold.
	if = {
		limit = { always = scope:chess_gold }
		fp2_dc_stake_fortune_effect = {
			VICTOR = scope:dc_victor
			LOSER = scope:dc_loser
		}
	}
	## Land bets... land.
	if = {
		limit = { always = scope:chess_land }
		fp2_dc_stake_titles_effect = { VICTOR = scope:dc_victor }
	}
}
